# WHAT ARE WEBSOCKETS?
----------------------

* Intro: What Are WebSockets?
-----------------------------
1 min
Imagine that your favorite basketball team is playing but you can’t watch the game live. You’re trying to follow the score on your phone but you can only get the live score by manually 
pressing a button to request new data. Needless to say, this isn’t a great user experience. Not only is pressing a button to get the latest score annoying, each request will take some 
time to process meaning that the score may have already changed by the time you get a response!

This is how an application using an HTTP connection might work and demonstrates the problem that WebSocket connections are here to solve. While plain old HTTP connections require the 
client to make a new request to the server in order to get new data, WebSocket connections require just a single request that establishes continuous, bidirectional communication enabling 
real-time updates of data shared between a client and a server.

A WebSocket connection is the solution that allows you to track the score of a basketball game in real-time, send and receive instant messages in an online chatroom, and play fast-paced 
multiplayer video games in your browser.

This lesson covers the core concepts of WebSockets while the next lesson will cover building a WebSockets application. In this lesson, you will learn how WebSockets:

	. Benefit specific kinds of applications

	. Have various modes of communication

	. Are built upon the foundation of an HTTP request

	. Create a persistent connection

	. Allow for bidirectional communication

	. Are superior to earlier attempts to mimic real-time updates

	. Are initiated with something called a “handshake”

	. Can be made more secure using the wss:// protocol and HTTPS

Before taking this course, make sure you are familiar with Node.js and the basics of HTTP connections between clients and servers. If you need to review Node.js, check out the 
corresponding Learn Node.js course.

* Instructions
--------------
Take a look at these two versions of the same application. They both allow a user to track the current stock price for a company, however one requires you to manually fetch the current 
price by pressing a button while the other is continuously updating with the real-time price.

Which of these applications uses a WebSocket connection and which uses a traditional HTTP connection? Which of these versions offers the superior user experience?

Hint
The diagram on the left shows the HTTP version of the application. Notice how data can only come in once the button is pressed and a new data request is made.

The diagram on the right shows the WebSocket version of the application in which data is continuously streamed from the server to the client.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* WebSocket Communication Patterns
----------------------------------
2 min
The main feature of a WebSocket connection is that they allow continuous and bidirectional communication between a server and a client. In addition to the client sending data to the 
server, the server can also send data directly to the client – and this can happen without interruption!

For example, in the stock tracking application from the previous exercise, the server can continuously send the client the most up-to-date stock prices without the client requesting 
them.

In addition to enabling uninterrupted communication between a client and a server, WebSocket connections also enable a communication pattern called broadcasting. Broadcasting is when a 
server sends the same message to many connected clients at once.

In some cases, the server may send a broadcast message to all connected users but often the server will choose only a subset of clients to broadcast a message to, such as in a chatroom 
application. For example, when a client’s message is sent to the server, the server can broadcast the message to all other connected clients. If the application supports smaller chat 
rooms, the server can determine which room the “sender” is in, and broadcast their message only to the other clients in the same room.

To summarize, WebSocket connections enable the three following communication patterns:

	. client to server

	. server to client

	. server to many clients (broadcasting)

* Instructions
--------------
Take a look at how a social-media news feed application might utilize each of these three communication patterns. Can you recognize which communication pattern is being used at each 
step?

Hint
The client can send information to the server by writing a new post or liking an existing post. The server can broadcast new posts to the other clients. When a client's own post receives 
a "like", the server can send that client a notification.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Persistent Connection
-----------------------
3 min
In order for WebSocket connections to achieve bidirectional and continuous communication, there must first exist a persistent connection.

To help us understand this, let’s start by refreshing how non-persistent, uni-directional HTTP connections work. HTTP connections follow a request-response messaging pattern:

In the request-response pattern, a client will open a connection to make a request from a server and the server will send back a response. The connection is then immediately closed 
requiring a new request to be made to fetch more data.

Unlike HTTP connections, WebSocket connections stay open, or persist, allowing for clients and servers to continuously send information back and forth until either the client or the 
server decides to terminate the connection. This is also known as a publish-subscribe messaging pattern: the client can “subscribe” to the server and whenever the server “publishes” a 
message, the subscribers are notified.

This persistent connection provides a few key benefits:

	. Only one request-response is needed to establish the connection, greatly reducing the data transmitted along with each request in the form of headers.

	. The WebSocket connection is stateful meaning that state can be maintained on that connection. The server can keep track of the data that has already been sent to the client and 
	vice-versa without relying on cookies or session ids.

* Instructions
--------------
To the right, we can see that WebSocket connections create a persistent bidirectional communication connection. Once a client and the server have completed a handshake (discussed in 
detail in the next exercise), a line of communication is opened, meaning that both the client and the server can push data back and forth. Either party may choose to close the connection 
at any time, however, this does not occur automatically!

Compare and contrast the diagram showing the HTTP request-response pattern with the diagram showing the persistent WebSocket connection.

------------------------------------------------------------------------------------------------------------------------------------------------------------------






































